//nanoid = generate unique ids

//reducers = functionality  //Slice (bigger version of reducers)

import {createSlice, nanoid } from '@reduxjs/toolkit';

const initialState = {
    todos: [{id: 1, text: "Hello world"}]
}



export const todoSlice = createSlice({
    name: 'todo',   //slice's name (only shows in the extension)
    initialState,
    reducers: {
        addTodo: (state, action) => {
            const todo = {
                id: nanoid(), 
                text: action.payload    //payload itself is an object (action.payload.text)
            }
            state.todos.push(todo)
        },
        // updateTodo: (state, action) => {    //The action.payload contains an object with two properties: id and newText.
        //     const { id, newText } = action.payload; 
        //     const todoToUpdate = state.todos.find(todo => todo.id === id);
        //     if (todoToUpdate) {
        //         todoToUpdate.text = newText;
        //     }
        // },

        removeTodo: (state, action) => {
            state.todos = state.todos.filter((todo) => todo.id !== action.payload )
        },
    }
})

export const {addTodo, removeTodo} = todoSlice.actions      //these (addTodo, removeTodo) are called the actions

export default todoSlice.reducer
//todoSlice.reducer is the reducer generated by createSlice, 
//which manages changes to the todos part of the state based on dispatched actions.